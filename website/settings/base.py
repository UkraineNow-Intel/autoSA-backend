"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 4.0.2.
"""

from os import environ
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
PROJECT_DIR = BASE_DIR / "website"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.postgres",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "storages",
    "django_filters",
    "django_extensions",
    "django_celery_beat",
    "psqlextra",
    "taggit",
    "rest_framework",
    "rest_framework_gis",
    "api.apps.ApiConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            PROJECT_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "website.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

POSTGRES_EXTRA_DB_BACKEND_BASE = "django.contrib.gis.db.backends.postgis"

DATABASES = {
    "default": {
        "ENGINE": "psqlextra.backend",
        "NAME": "autosa",
        "USER": environ.get("PGUSER", None) or "autosa",
        "PASSWORD": environ.get("PGPASSWORD", None) or "autosa",
        "HOST": environ.get("PGHOST", None) or "127.0.0.1",
        "PORT": environ.get("PGPORT", None) or "5432",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static Files

STATICFILES_DIRS = [PROJECT_DIR / "static"]


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

TAGGIT_CASE_INSENSITIVE = True
APPEND_SLASH = False

# CELERY STUFF
CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
CELERY_BROKER_URL = "redis://localhost:6379/0"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# web scraping
# these will be looked up in scrapeConfig.ini and scraped
WEBSCRAPER_SITE_KEYS = ["liveuamap"]

# twitter data retrieval
TWITTER_BEARER_TOKEN = config("TWITTER_BEARER_TOKEN")
# we'll get recent tweets from these accounts.
# see infotools/twitter.py
TWITTER_ACCOUNTS = [
    "@War_Mapper",
    "@soar_earth",
    "@mschwirtz",
    "@GeneralStaffUA",
    "@DFRLab",
    "@AtlanticCouncil",
    "@KofmanMichael",
    "@TheStudyofWar",
    "@Liveuamap",
    "@IAPonomarenko",
    "@SOFNewsUpdate",
    "@sbreakintl",
    "@NewUkraineNews",
    "@KyivIndependent",
    "@ChristopherJM",
    "@christogrozev",
    "@MarQs__",
    "@BackupMarqs",
    "@Now_in_Ukraine",
    "@sentdefender",
    "@JoeBiden",
    "@POTUS",
    "@CNN",
    "@andymilburn8",
    "@Nrg8000",
    "@ASPI_ICPC",
    "@UkraineAlert",
    "@Aurora_Knish",
    "@konrad_muzyka",
    "@MotolkoHelp",
    "@Motolko",
    "@HN_Schlottman",
    "@USArmy",
    "@NZZ",
    "@phildstewart",
    "@DefenceHQ",
    "@DanLamothe",
    "@washingtonpost",
    "@UMassJournalism",
    "@merrillcollege",
    "@Chicopee_MA",
    "@ukr_satflash",
    "@JominiW",
    "@WarintheFuture",
    "@MilWritersGuild",
    "@CSIS",
    "@anders_aslund",
    "@The_IntelHub",
    "@JohnBrennan",
    "@IntelDoge",
    "@bellingcat",
    "@ZelenskyyUa",
    "@DmytroKuleba",
    "@vcdgf555",
    "@thewarzonewire",
    "@TheAviationist",
    "@PopMech",
    "@11thHour",
    "@AirForceTimes",
    "@EerikNKross",
    "@A_SHEKH0VTS0V",
    "@OSINT88",
    "@partizan_oleg",
    "@ukraine_map",
    "@GeoConfirmed",
]
